<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mall.dao.mapper.product.ProductPropertyMapper">

    <resultMap id="ResultMap" type="com.mall.dao.dto.product.ProductPropertyValueDTO">
        <result column="propertyValueId" property="propertyValueId"/>
        <result column="propertyNameId" property="propertyNameId"/>
        <result column="propertyName" property="propertyName"/>
        <result column="value" property="value"/>
        <result column="isSale" property="isSale"/>
        <result column="productId" property="productId"/>
        <result column="idDelete" property="idDelete"/>
    </resultMap>
    <resultMap id="ResultNameMap" type="com.mall.dao.dto.product.ProductPropertyNameDTO">
        <result column="propertyNameId" property="propertyNameId"/>
        <result column="name" property="name"/>
        <result column="typeId" property="typeId"/>
        <result column="isSale" property="isSale"/>
        <result column="isShow" property="isShow"/>
        <result column="idDelete" property="idDelete"/>
        <result column="typeName" property="typeName"/>
    </resultMap>
    <select id="findList" resultMap="ResultNameMap">
        SELECT
            a.property_Name_Id propertyNameId,
            a.type_id typeId,
            a.NAME NAME,
            a.is_Sale isSale,
            a.is_show isShow,
            a.is_delete isDelete,
            b.type_name typeName
        FROM
            mall_product_property_name a
        INNER JOIN mall_product_type b ON a.type_id = b.type_id
        WHERE  1 = 1
        <if test="dto.name !=null and dto.name !=''">
            AND a.NAME like concat('%', #{dto.name}, '%')
        </if>
        <if test="dto.typeName !=null and dto.typeName !=''">
            AND b.type_name like concat('%', #{dto.typeName}, '%')
        </if>
    </select>

    <select id="findByPropertyNameIdAndProductId" resultMap="ResultMap">
        SELECT
            a.property_value_id propertyValueId,
            a.product_id productId,
            a.is_sale isSale,
            a.property_name_id propertyNameId,
            a.value value,
            b.name propertyName
        FROM mall_product_property_value a
        inner JOIN mall_product_property_name b ON  a.property_name_id = b.property_name_id
        where 1 = 1
        AND b.is_delete = '0'
        <if test="propertyNameId!=null and propertyNameId!=''">
            AND a.property_name_id = #{propertyNameId}
        </if>
        <if test="productId!=null and productId!=''">
            AND a.product_id = #{productId}
        </if>
    </select>

    <delete id="deleteByProductId">
        DELETE  FROM mall_product_property_value  WHERE product_id = #{productId}
    </delete>

    <delete id="deleteSku">
      delete a from mall_product_sku a where a.properties LIKE CONCAT('%&amp;', #{propertyNameId},':%');
    </delete>
    <delete id="deleteProperty">
        delete a from mall_product_property_value a where a.property_name_id = #{propertyNameId};
    </delete>
</mapper>
        <!--
            <id>：主键字段
            <result>：普通字段
            type：整体封装出的类型
            column：字段名（表里定义好的）
            property：关联属性（查询出来的结果封装成Country里的哪个属性）
            ofType：指定属性类型（关联属性是什么类型）
            <collection>：集合封装
             association:用于配置1对1的映射
                                属性property：company对象在user对象中的属性名
                                属性javaType：company属性的java对象 类型
                                属性column：user表中的外键引用company表
            collection ：配置1对多关系映射
                    property：在user里面的List<Account>的属性名
                    ofType:当前account表的java类型
                    column:外键
                -->